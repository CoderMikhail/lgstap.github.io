from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü first_launch
    c.execute("PRAGMA table_info(users)")
    columns = c.fetchall()
    column_names = [column[1] for column in columns]

    if 'first_launch' not in column_names:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü first_launch
        c.execute("ALTER TABLE users ADD COLUMN first_launch BOOLEAN DEFAULT 1")

    conn.commit()
    conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def add_lead(user_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("UPDATE users SET leads = leads + 1, balance = balance + 0.4 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, username, balance, leads, first_launch) VALUES (?, ?, 0, 0, 1)",
              (user_id, username))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
    c.execute("SELECT first_launch FROM users WHERE id = ?", (user_id,))
    first_launch = c.fetchone()[0]
    conn.close()

    if first_launch:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
        keyboard = [[InlineKeyboardButton("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                                          web_app={'url': 'https://codermikhail.github.io/legendwebapp.github.io/'})]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=reply_markup)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º first_launch –≤ False
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("UPDATE users SET first_launch = 0 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("–û –Ω–∞—Å", callback_data='about')],
            [InlineKeyboardButton("–ß–∞—Ç", callback_data='chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'profile':
        user_id = query.from_user.id
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("SELECT balance, leads FROM users WHERE id = ?", (user_id,))
        result = c.fetchone()
        conn.close()

        if result:
            balance, leads = result
            profile_text = f"""üíª –ü—Ä–æ—Ñ–∏–ª—å
‚î† –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/lgndtmwabot?start=ref{user_id}
‚î† –í—Å–µ–≥–æ {leads} –ª–∏–¥–æ–≤
‚î† –ù–∞ —Å—É–º–º—É {balance}$
üè¶ –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ 5.0$, —É –≤–∞—Å {balance}$
‚îóüíº –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {max(0, 5.0 - balance)}$ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
            await query.edit_message_text(profile_text)
    elif query.data == 'about':
        await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å.")
    elif query.data == 'chat':
        await query.edit_message_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç].")


def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ApplicationBuilder
    application = ApplicationBuilder().token("7614493417:AAEMcK6cM7SXR3RD9GyEt-YPAzN5_piBTJ8").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()